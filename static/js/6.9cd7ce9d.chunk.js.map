{"version":3,"sources":["components/pages/protected/UserPage/components/UserCharts.tsx","components/pages/protected/components/MonthlyChartsSection.tsx","components/pages/protected/components/WeeklyChartsSection.tsx"],"names":["UserCharts","ActualLoader","chartsData","useCharts","user","useUser","usePDF","document","subject","name","surname","email","sections","title","rows","reservedRooms","map","r","buildingName","roomName","reservationsCount","allTimeMinutes","avgActualTimeMinutes","avgPlannedTimeMinutes","weekly","weekDays","day","monthly","PDF","loading","url","startIcon","href","download","defaultOpen","fullWidth","data","xKey","y","label","key","MonthlyChartsSection","props","React","memo","WeeklyChartsSection","resolveDay"],"mappings":"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","file":"static/js/6.9cd7ce9d.chunk.js","sourcesContent":["import { UserChartsData } from \"../../../../../models/Stats\";\nimport { Chart, ChartSection, ChartsTab, useCharts } from \"../../components/Charts\";\nimport MonthlyChartsSection from \"../../components/MonthlyChartsSection\";\nimport WeeklyChartsSection from \"../../components/WeeklyChartsSection\";\nimport { Button } from \"@mui/material\";\nimport { usePDF } from \"@react-pdf/renderer\";\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\nimport PDFPage from \"../../components/PDF/PDFPage\";\nimport Table from \"../../components/PDF/Table\";\nimport { weekDays } from \"../../components/Charts/Chart\";\nimport { useUser } from \"../UserContext\";\n\n\n\nexport default function UserCharts() {\n    return (\n        <ChartsTab>\n            <ActualLoader />\n        </ChartsTab>\n    );\n}\n\n\nfunction ActualLoader() {\n    const { chartsData } = useCharts<UserChartsData>();\n    const { user } = useUser();\n\n    const [PDF] = usePDF({\n        document: <PDFPage\n            subject={`Statystyki użytkownika ${user.name} ${user.surname}, ${user.email}`}\n            sections={\n                [\n                    <Table\n                        title=\"Rezerwowane sale\"\n                        rows={[\n                            [\n                                'nazwa sali',\n                                'ilość rezerwacji',\n                                'czas rezerwacji',\n                                'średni czas rezerwacji',\n                                'średni planowany czas rezerwacji'\n                            ]\n                            , ...chartsData.reservedRooms.map(r => [\n                                `${r.buildingName} - ${r.roomName}`,\n                                r.reservationsCount,\n                                r.allTimeMinutes,\n                                r.avgActualTimeMinutes,\n                                r.avgPlannedTimeMinutes\n                            ])\n                        ]}\n                    />,\n                    <Table\n                        title=\"Statystyki tygodniowe\"\n                        rows={[\n                            [\n                                'dzień tygodnia',\n                                'ilość rezerwacji',\n                                'czas rezerwacji',\n                                'średni czas rezerwacji',\n                                'średni planowany czas rezerwacji'\n                            ]\n                            , ...chartsData.weekly.map(r => [\n                                weekDays[r.day],\n                                r.reservationsCount,\n                                r.allTimeMinutes,\n                                r.avgActualTimeMinutes,\n                                r.avgPlannedTimeMinutes\n                            ])\n                        ]}\n                    />,\n                    <Table\n                        title=\"Statystyki miesięczne\"\n                        rows={[\n                            [\n                                'dzień miesiąca',\n                                'ilość rezerwacji',\n                                'czas rezerwacji',\n                                'średni czas rezerwacji',\n                                'średni planowany czas rezerwacji'\n                            ]\n                            , ...chartsData.monthly.map(r => [\n                                r.day,\n                                r.reservationsCount,\n                                r.allTimeMinutes,\n                                r.avgActualTimeMinutes,\n                                r.avgPlannedTimeMinutes\n                            ])\n                        ]}\n                    />\n                ]} />\n    });\n\n    return (\n        <>\n            {\n                (PDF.loading || !PDF.url) ?\n                    <p>loading pdf ...</p>\n                    :\n                    <Button startIcon={<PictureAsPdfIcon />}>\n                        <a href={PDF.url} download={'stats.pdf'} title='pobierz tabele pdf'>\n                            Pobierz raport pdf\n                        </a>\n                    </Button>\n            }\n\n            <ChartSection defaultOpen title='Rezerwowane Sale'>\n                <Chart\n                    fullWidth\n                    title='Ilość rezerwacji w rezerwowanych salach'\n                    data={chartsData.reservedRooms}\n                    xKey='roomName'\n                    y={[\n                        { label: 'Ilość rezerwacji', key: 'reservationsCount' }\n                    ]}\n                />\n                <Chart\n                    fullWidth\n                    title=\"Średnie czasy rezerwacji\"\n                    data={chartsData.reservedRooms}\n                    xKey='roomName'\n                    y={[\n                        { label: 'Średni planowany czas', key: 'avgPlannedTimeMinutes' },\n                        { label: 'Średni faktyczny czas', key: 'avgActualTimeMinutes' },\n                    ]}\n                />\n                <Chart\n                    fullWidth\n                    title=\"Czas wszystkich rezerwacji w danej sali\"\n                    data={chartsData.reservedRooms}\n                    xKey='roomName'\n                    y={[\n                        { label: 'Czas całkowity', key: 'allTimeMinutes' },\n                    ]}\n                />\n            </ChartSection>\n\n            <WeeklyChartsSection data={chartsData.weekly} />\n\n            <MonthlyChartsSection data={chartsData.monthly} />\n        </>\n    );\n}","import React from \"react\";\nimport { DayStatsItem } from \"../../../../models/Stats\";\nimport { Chart, ChartSection } from \"./Charts\";\n\n\ninterface MonthlyChartsSectionProps {\n    data: DayStatsItem[]\n}\n\nfunction MonthlyChartsSection(props: MonthlyChartsSectionProps) {\n    return (\n        <ChartSection title='Statystyki miesięczne'>\n            <Chart\n                fullWidth\n                title='Ilość rezerwacji na dzień miesiąca'\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Ilość rezerwacji', key: 'reservationsCount' }\n                ]}\n            />\n            <Chart\n                fullWidth\n                title=\"Faktyczny czas wszystkich rezerwacji\"\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Czas całkowity [m]', key: 'allTimeMinutes' },\n                ]}\n            />\n            <Chart\n                fullWidth\n                title=\"Średni czas rezerwacji\"\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Średni planowany czas [m]', key: 'avgPlannedTimeMinutes' },\n                    { label: 'Średni faktyczny czas [m]', key: 'avgActualTimeMinutes' },\n                ]}\n            />\n        </ChartSection>\n    );\n}\n\n\nexport default React.memo(MonthlyChartsSection);","import React from \"react\";\nimport { DayStatsItem } from \"../../../../models/Stats\";\nimport { Chart, ChartSection } from \"./Charts\";\n\n\ninterface WeeklyChartsSectionProps {\n    data: DayStatsItem[]\n}\n\n\nfunction WeeklyChartsSection(props: WeeklyChartsSectionProps) {\n    return (\n        <ChartSection title='Statystyki tygodniowe'>\n            <Chart\n                fullWidth\n                resolveDay\n                title='Ilość rezerwacji na dzień tygodnia'\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Ilość rezerwacji', key: 'reservationsCount' }\n                ]}\n            />\n            <Chart\n                fullWidth\n                resolveDay\n                title=\"Faktyczny czas wszystkich rezerwacji\"\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Czas całkowity [m]', key: 'allTimeMinutes' },\n                ]}\n            />\n            <Chart\n                fullWidth\n                resolveDay\n                title=\"Średni czas rezerwacji\"\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Średni planowany czas [m]', key: 'avgPlannedTimeMinutes' },\n                    { label: 'Średni faktyczny czas [m]', key: 'avgActualTimeMinutes' },\n                ]}\n            />\n        </ChartSection>\n    );\n}\n\nexport default React.memo(WeeklyChartsSection);"],"sourceRoot":""}