{"version":3,"sources":["components/pages/protected/components/RoomOrBuildingChartTab.tsx","components/pages/protected/components/MonthlyChartsSection.tsx","components/pages/protected/components/WeeklyChartsSection.tsx"],"names":["RoomOrBuildingChartTab","ActualLoader","React","memo","chartsData","useCharts","roomContext","useRoomContext","buildingContext","useBuilding","usePDF","document","subject","room","name","building","sections","title","rows","users","map","r","email","reservationsCount","allTimeMinutes","avgActualTimeMinutes","avgPlannedTimeMinutes","weekly","weekDays","day","monthly","PDF","loading","url","startIcon","href","download","data","defaultOpen","fullWidth","length","xKey","y","label","key","MonthlyChartsSection","props","WeeklyChartsSection","resolveDay"],"mappings":"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","file":"static/js/0.e4c42b92.chunk.js","sourcesContent":["import { Button } from \"@mui/material\";\nimport { usePDF } from \"@react-pdf/renderer\";\nimport React from \"react\";\nimport { BuildingOrRoomChartsData } from \"../../../../models/Stats\";\n\nimport { ChartsTab, Chart, ChartSection, useCharts } from \"./Charts\";\nimport { weekDays } from \"./Charts/Chart\";\nimport MonthlyChartsSection from \"./MonthlyChartsSection\";\nimport PDFPage from \"./PDF/PDFPage\";\nimport Table from \"./PDF/Table\";\nimport WeeklyChartsSection from \"./WeeklyChartsSection\";\nimport PictureAsPdfIcon from '@mui/icons-material/PictureAsPdf';\nimport { useRoomContext } from \"../RoomPage/RoomContext\";\nimport { useBuilding } from \"../BuildingPage/BuildingContext\";\n\n\nfunction RoomOrBuildingChartTab() {\n    return (\n        <ChartsTab>\n            <ActualLoader />\n        </ChartsTab>\n    );\n}\n\n// need to use actual loading component to access charts context in ChartsTab\nconst ActualLoader = React.memo(() => {\n    const { chartsData } = useCharts<BuildingOrRoomChartsData>();\n    const roomContext = useRoomContext();\n    const buildingContext = useBuilding();\n\n\n    const [PDF] = usePDF({\n        document: <PDFPage\n            subject={'Statystyki ' + (roomContext ?\n                `sali ${roomContext.room.name}` :\n                buildingContext ? `budynku ${buildingContext.building.name}` :\n                    'nie rozpoznano')\n            }\n            sections={\n                [\n                    <Table\n                        title=\"Statystyki użytkowników\"\n                        rows={[\n                            [\n                                'email',\n                                'ilość rezerwacji',\n                                'czas rezerwacji',\n                                'średni czas rezerwacji',\n                                'średni planowany czas rezerwacji'\n                            ]\n                            , ...chartsData.users.map(r => [\n                                r.email,\n                                r.reservationsCount,\n                                r.allTimeMinutes,\n                                r.avgActualTimeMinutes,\n                                r.avgPlannedTimeMinutes\n                            ])\n                        ]}\n                    />,\n                    <Table\n                        title=\"Statystyki tygodniowe\"\n                        rows={[\n                            [\n                                'dzień tygodnia',\n                                'ilość rezerwacji',\n                                'czas rezerwacji',\n                                'średni czas rezerwacji',\n                                'średni planowany czas rezerwacji'\n                            ]\n                            , ...chartsData.weekly.map(r => [\n                                weekDays[r.day],\n                                r.reservationsCount,\n                                r.allTimeMinutes,\n                                r.avgActualTimeMinutes,\n                                r.avgPlannedTimeMinutes\n                            ])\n                        ]}\n                    />,\n                    <Table\n                        title=\"Statystyki miesięczne\"\n                        rows={[\n                            [\n                                'dzień miesiąca',\n                                'ilość rezerwacji',\n                                'czas rezerwacji',\n                                'średni czas rezerwacji',\n                                'średni planowany czas rezerwacji'\n                            ]\n                            , ...chartsData.monthly.map(r => [\n                                r.day,\n                                r.reservationsCount,\n                                r.allTimeMinutes,\n                                r.avgActualTimeMinutes,\n                                r.avgPlannedTimeMinutes\n                            ])\n                        ]}\n                    />\n                ]} />\n    });\n\n\n    return (\n        <>\n            {\n                (PDF.loading || !PDF.url) ?\n                    <p>loading pdf ...</p>\n                    :\n                    <Button startIcon={<PictureAsPdfIcon />}>\n                        <a href={PDF.url} download={'stats.pdf'} title='pobierz tabele pdf'>\n                            Pobierz raport pdf\n                        </a>\n                    </Button>\n            }\n\n            <WeeklyChartsSection data={chartsData.weekly} />\n\n            <MonthlyChartsSection data={chartsData.monthly} />\n\n            <ChartSection\n                defaultOpen\n                title='Wykresy odnośnie użytkowników'\n            >\n                <Chart\n                    fullWidth={chartsData.users.length > 2}\n                    title=\"Średnie czasy rezerwacji\"\n                    data={chartsData.users}\n                    xKey='email'\n                    y={[\n                        { label: 'Średni planowany czas', key: 'avgPlannedTimeMinutes' },\n                        { label: 'Średni faktyczny czas', key: 'avgActualTimeMinutes' },\n                    ]}\n                />\n                <Chart\n                    fullWidth={chartsData.users.length > 2}\n                    title='Ilość rezerwacji użytkowników'\n                    data={chartsData.users}\n                    xKey='email'\n                    y={[\n                        { label: 'Ilość rezerwacji', key: 'reservationsCount' }\n                    ]}\n                />\n                <Chart\n                    fullWidth={chartsData.users.length > 2}\n                    title=\"Czas wszystkich reserwacji danego użytkownika\"\n                    data={chartsData.users}\n                    xKey='email'\n                    y={[\n                        { label: 'Czas całkowity', key: 'allTimeMinutes' },\n                    ]}\n                />\n            </ChartSection>\n        </>\n    )\n});\n\nexport default React.memo(RoomOrBuildingChartTab);","import React from \"react\";\nimport { DayStatsItem } from \"../../../../models/Stats\";\nimport { Chart, ChartSection } from \"./Charts\";\n\n\ninterface MonthlyChartsSectionProps {\n    data: DayStatsItem[]\n}\n\nfunction MonthlyChartsSection(props: MonthlyChartsSectionProps) {\n    return (\n        <ChartSection title='Statystyki miesięczne'>\n            <Chart\n                fullWidth\n                title='Ilość rezerwacji na dzień miesiąca'\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Ilość rezerwacji', key: 'reservationsCount' }\n                ]}\n            />\n            <Chart\n                fullWidth\n                title=\"Faktyczny czas wszystkich rezerwacji\"\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Czas całkowity [m]', key: 'allTimeMinutes' },\n                ]}\n            />\n            <Chart\n                fullWidth\n                title=\"Średni czas rezerwacji\"\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Średni planowany czas [m]', key: 'avgPlannedTimeMinutes' },\n                    { label: 'Średni faktyczny czas [m]', key: 'avgActualTimeMinutes' },\n                ]}\n            />\n        </ChartSection>\n    );\n}\n\n\nexport default React.memo(MonthlyChartsSection);","import React from \"react\";\nimport { DayStatsItem } from \"../../../../models/Stats\";\nimport { Chart, ChartSection } from \"./Charts\";\n\n\ninterface WeeklyChartsSectionProps {\n    data: DayStatsItem[]\n}\n\n\nfunction WeeklyChartsSection(props: WeeklyChartsSectionProps) {\n    return (\n        <ChartSection title='Statystyki tygodniowe'>\n            <Chart\n                fullWidth\n                resolveDay\n                title='Ilość rezerwacji na dzień tygodnia'\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Ilość rezerwacji', key: 'reservationsCount' }\n                ]}\n            />\n            <Chart\n                fullWidth\n                resolveDay\n                title=\"Faktyczny czas wszystkich rezerwacji\"\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Czas całkowity [m]', key: 'allTimeMinutes' },\n                ]}\n            />\n            <Chart\n                fullWidth\n                resolveDay\n                title=\"Średni czas rezerwacji\"\n                data={props.data}\n                xKey='day'\n                y={[\n                    { label: 'Średni planowany czas [m]', key: 'avgPlannedTimeMinutes' },\n                    { label: 'Średni faktyczny czas [m]', key: 'avgActualTimeMinutes' },\n                ]}\n            />\n        </ChartSection>\n    );\n}\n\nexport default React.memo(WeeklyChartsSection);"],"sourceRoot":""}